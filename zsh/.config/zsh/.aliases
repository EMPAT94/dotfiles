# vi: ft=zsh

alias ...='../..'
alias ....='../../..'
alias l="exa --icons --long --header --all"
alias v="nvim"
alias w="wiki"
alias b="brew"

alias fd="fd --ignore-case --follow"
alias ls="exa --icons"
alias py="python"
alias no="node"
alias vi="nvim";

alias icat="kitty +kitten icat"
alias top="bpytop";
alias tree="exa --icons --tree"
alias vim="nvim";

alias adb_connect="adb connect 192.168.0.190:5555";
alias decrypt="gpg -d" # file.gpg -> file
alias encrypt="gpg -er Pritesh" # file -> file.gpg
alias http_server="python3 -m http.server 8888";
alias ramfs="sudo mount -t tmpfs -o size=5g tmpfs /mnt/ramfs"
alias show_private_ip="ip addr | rg '192.*/'";
alias show_public_ip="curl ifconfig.co";
alias ssh="TERM=xterm-256color ssh"

notify() {
  osascript -e "display notification \"$2\" with title \"$1\""
}

music() {
  nohup /opt/homebrew/bin/vlc \
    --quiet \
    --no-video \
    --recursive=expand \
    --no-media-library \
    --playlist-autostart \
    --playlist-tree \
    --no-repeat \
    --loop \
    --random\
    ${1:-'/Users/pritesh/Music'} > /dev/null &

  disown
}

wiki() {
  cd ~/Notes
  nvim index.md +Telescope\ find_files
}

scrcap() {
  adb shell screencap /sdcard/scrcap.png
  adb pull /sdcard/scrcap.png ~/documents/scr/$(date '+%s').png
  adb shell rm /sdcard/scrcap.png
}

cleanup_everything() {
  # Remove history files & cache
  rm -rf ~/.*history
  rm -rf ~/.config/zsh/.zhistory
  rm -rf ~/.lesshst
  rm -rf ~/.wget-hsts
  rm -rf ~/.ipython
  rm -rf ~/.cljs
  # rm -rf ~/.Trash/* # FIXME Gives "no files found" error

  # Remove .DS_Store trash
  \fd -t f --unrestricted --glob --follow --quiet --show-errors --type file ".DS_Store" --exec rm

  # Trim packages
  brew autoremove && brew cleanup --prune=all

  # Clean macos tracking
  sqlite3 /Users/pritesh/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 'delete from LSQuarantineEvent'

  # Clear Cache
  # rm -rf $HOME/Library/Caches/*
  # rm -rf ~/.cache/*

  # Delete docker stuff
  #   This is for docker desktop
  # if [ -e unix:///var/run/docker.sock ]
  #   When using colima (FIXME)
  if [ -e unix:///Users/pritesh/.colima/default/docker.sock ]
  then
    docker image prune --all
    docker volume prune --all
    docker network prune --all
  fi
}

update_docker_images() {
  docker images | awk '{print $1":"$2}' | tail -n +2 | xargs -n 1 docker pull
}

# For example, to run a testrunner T on dir change D
# $ watch_and_do D T
watch_and_do() {
  while true;	do watch -g ls -l $1 >/dev/null && clear; ${*:2}; sleep 1; done
}

sqlite() {
  /opt/homebrew/opt/sqlite/bin/sqlite3 --header --column "$@"
}

# eval $(python ~/.config/zsh/docker_aliases.py)
