alias ...='../..'
alias ....='../../..'
alias l="exa --icons --long --header --all"
alias v="nvim"
alias w="wiki"

alias fd="fd --ignore-case --follow"
alias ls="exa --icons"
alias vi="nvim";

alias top="bpytop";
alias tree="exa --icons --tree"
alias vim="nvim";

alias decrypt="gpg -d" # file.gpg -> file
alias encrypt="gpg -er Pritesh" # file -> file.gpg
alias http_server="python3 -m http.server 8888";
alias show_public_ip="curl ifconfig.co";
alias emulator="/Users/pritesh/Library/Android/sdk/emulator/emulator @Pixel_6_Pro >/dev/null 2>&1 &; disown"

music() {
  nohup /opt/homebrew/bin/vlc \
    --quiet \
    --no-video \
    --recursive=expand \
    --no-media-library \
    --playlist-autostart \
    --playlist-tree \
    --no-repeat \
    --loop \
    --random\
    ${1:-'/Users/pritesh/Music'} > /dev/null &

  disown
}

convert_mov_to_mp4() {
  mv $1 video.mov
  ffmpeg -i video.mov -vcodec h264 -acodec mp2 video.mp4
}

download_english_song() {
  pushd /tmp
  mkdir song
  cd song
  youtube-dl --ignore-errors --format bestaudio --extract-audio --audio-format mp3 --output '%(title)s.%(ext)s' $1
  beet -d ~/Music/English import -s *.mp3
  rm -i *.mp3
  popd
  }

wiki() {
  pushd ~/Notes
  nvim index.md +Telescope\ find_files
  popd
}

cleanup_everything() {
  echo -e "\nCleaning histories"
  (
    rm -rf ~/.*history
    rm -rf ~/.config/zsh/.zhistory
    rm -rf ~/.lesshst
    rm -rf ~/.wget-hsts
    rm -rf ~/.ipython
    rm -rf ~/.cljs
  ) >/dev/null 2>&1

  echo -e "\nEmptying trash"
  (
    pushd ~/.Trash/
    rm -rf *
    popd
  ) 2> /dev/null

  echo -e "\nRemoving .DS_Store files"
  \fd --unrestricted --glob --follow --prune \
    --quiet --type file ".DS_Store" \
    --exec rm

  echo -e "\nPruning brew packages"
  brew autoremove && brew cleanup --prune=all

  echo -e "\nDeleting macos tracking"
  sqlite3 /Users/pritesh/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 'delete from LSQuarantineEvent'

  # Clear Cache
  # rm -rf $HOME/Library/Caches/*
  # rm -rf ~/.cache/*

  # Delete docker stuff
  if (docker stats --no-stream >/dev/null 2>&1)
  then
    echo -e "\nClearing docker stuff - be careful if prompted!"
    docker image prune
    docker volume prune
    docker network prune
  fi

  echo -e "\nAll Done!\n"
}

# For example, to run a testrunner T on dir change D
# $ watch_and_do D T
watch_and_do() {
  while true;	do watch -g ls -l $1 >/dev/null && clear; ${*:2}; sleep 1; done
}

sqlite() {
  /opt/homebrew/opt/sqlite/bin/sqlite3 --header --column "$@"
}

# eval $(python ~/.config/zsh/docker_aliases.py)
