# default : /usr/share/doc/moc/config.example

# In which directory do you store your music files?  If you specify it
# you will be able to jump straight to this directory with the '-m'
# parameter or the 'm' command.  This can also point to a playlist.
#
# Example:    MusicDir = "/home/joe/music"
#
MusicDir = "/home/pritesh/Music"

# Start in the music directory by default?  If set to 'no', start
# in the current directory by default.  A single directory on
# the command line takes precedence.
StartInMusicDir = yes

# Set playback toggles.
Shuffle = yes

# Default FormatString:
#
#   %n - Track number
#   %a - Artist
#   %A - Album
#   %t - Title
#   %(X:TRUE:FALSE) - Ternary expression: if X exists, do TRUE,
#                     otherwise FALSE.  The escape character must
#                     be doubled (i.e., '\\').  (See zshmisc
#                     documentation for more information.)
#
FormatString = "%(A:\[%A\] \| :)%(t:%t:)"

# Sound driver - OSS, ALSA, JACK, SNDIO (on OpenBSD) or null (only for
# debugging).  You can enter more than one driver as a colon-separated
# list.  The first working driver will be used.
SoundDriver = ALSA:OSS:JACK

# Show file time in menu?  Possible values: 'yes', 'no' and 'IfAvailable'
# (meaning show the time only when it is already known, which often works
# faster).
ShowTime = yes

# Show file format in menu?
ShowFormat = no

# Theme file to use.  This can be absolute path or relative to
# /usr/share/moc/themes/ (depends on installation prefix) or
# ~/.moc/themes/ .
#
# Example:    Theme = laras_theme
#
Theme = dracula_theme

# Should MOC try to autoload the default lyrics file for an audio?  (The
# default lyrics file is a text file with the same file name as the audio
# file name with any trailing "extension" removed.)
AutoLoadLyrics = no

# Should MOC precache files to assist gapless playback?
Precache = no

# Choose a keymap file (relative to '~/.moc/' or using an absolute path).
# An annotated example keymap file is included ('keymap.example').
#
# Example:    Keymap = my_keymap
#
Keymap = keymap

# FastDirs, these allow you to jump directly to a directory, the key
# bindings are in the keymap file.
#
# Examples:   Fastdir1 = /mp3/rock
#
#Fastdir1 =
#Fastdir10 =

# Which resampling method to use.  There are a few methods of resampling
# sound supported by libresamplerate.  The default is 'Linear') which is
# also the fastest.  A better description can be found at:
#
#    http://www.mega-nerd.com/libsamplerate/api_misc.html#Converters
#
# but briefly, the following methods are based on bandlimited interpolation
# and are higher quality, but also slower:
#
#    SincBestQuality   - really slow (I know you probably have an xx GHz
#                        processor, but it's still not enough to not see
#                        this in the top output :)  The worst case
#                        Signal-to-Noise Ratio is 97dB.
#    SincMediumQuality - much faster.
#    SincFastest       - the fastest bandlimited interpolation.
#
# And these are lower quality, but much faster methods:
#
#    ZeroOrderHold - really poor quality, but it's really fast.
#    Linear - a bit better and a bit slower.
#
ResampleMethod = SincMediumQuality

# By default, even if the sound card reports that it can output 24bit samples
# MOC converts 24bit PCM to 16bit.  Setting this option to 'yes' allows MOC
# to use 24bit output.  (The MP3 decoder, for example, uses this format.)
# This is disabled by default because there were reports that it prevents
# MP3 files from playing on some soundcards.
Allow24bitOutput = yes

# The number of audio files for which MOC will cache tags.  When this limit
# is reached, file tags are discarded on a least recently used basis (with
# one second resolution).  You can disable the cache by giving it a size of
# zero.  Note that if you decrease the cache size below the number of items
# currently in the cache, the number will not decrease immediately (if at
# all).
TagsCacheSize = 4096

# Number items in the playlist.
PlaylistNumbering = yes

# Main window layouts can be configured.  You can change the position and
# size of the menus (directory and playlist).  You have three layouts and
# can switch between then using the 'l' key (standard mapping).  By default,
# only two layouts are configured.
#
# The format is as follows:
#
#     - Each layout is described as a list of menu entries.
#     - Each menu entry is of the form:
#
#           menu(position_x, position_y, width, height)
#
#       where 'menu' is either 'directory' or 'playlist'.
#     - The parameters define position and size of the menu.  They can
#       be absolute numbers (like 10) or a percentage of the screen size
#       (like 45%).
#     - 'width' and 'height' can have also value of 'FILL' which means
#        fill the screen from the menu's position to the border.
#     - Menus may overlap.
#
# You must describe at least one menu (default is to fill the whole window).
# There must be at least one layout (Layout1) defined; others can be empty.
#
# Example:    Layout1 = playlist(50%,50%,50%,50%)
#             Layout2 = ""
#             Layout3 = ""
#
#             Just one layout, the directory will occupy the whole
#             screen, the playlist will have 1/4 of the screen size
#             and be positioned at lower right corner.  (Note that
#             because the playlist will be hidden by the directory
#             you will have to use the TAB key to make the playlist
#             visible.)
#
# Example:    Layout1 = playlist(0,0,100%,10):directory(0,10,100%,FILL)
#
#             The screen is split into two parts: playlist at the top
#             and the directory menu at the bottom.  Playlist will
#             occupy 10 lines and the directory menu the rest.
#
Layout1 = directory(0,0,20%,100%):playlist(20%,0,FILL,100%)

# Executing external commands (1 - 10) invoked with key commands (F1 - F10
# by default).
#
# Some arguments are substituted before executing:
#
#     %f - file path
#     %i - title made from tags
#     %S - start block mark (in seconds)
#     %E - end block mark (in seconds)
#
# Data from tags can also be substituted:
#
#     %t - title
#     %a - album
#     %r - artist
#     %n - track
#     %m - time of the file (in seconds)
#
# The parameters above apply to the currently selected file.  If you change
# them to capital letters, they are taken from the file currently playing.
#
# Programs are run using execv(), not a shell, so you can't do things like
# redirecting the output to a file.  The command string is split using blank
# characters as separators; the first element is the command to be executed
# and the rest are its parameters, so if you use "echo Playing: %I" we run
# program 'echo' (from $PATH) with 2 parameters: the string 'Playing:' and
# the title of the file currently playing.  Even if the title contains
# spaces, it's still one parameter and it's safe if it contains `rm -rf /`.
#
# Examples:   ExecCommand1 = "cp %f /mnt/usb_drive"
#
#ExecCommand1 =
#ExecCommand10 =

# Display full paths instead of just file names in the playlist.
PlaylistFullPaths = no

# Use start-song information from SID ('yes') or start at first song
# ('no').  Songs before the start-song won't be played.  (Note that this
# option previously took the values 1 and 0; these are now deprecated
# in favour of 'yes' and 'no'.)
SidPlay2_StartAtStart = no

# Play sub-tunes.  (Note that this option previously took the values 1
# and 0; these are now deprecated in favour of 'yes' and 'no'.)
SidPlay2_PlaySubTunes = no

# Run the OnSongChange command when a new song starts playing.
# Specify the full path (i.e. no leading '~') of an executable to run.
# Arguments will be passed, and you can use the following escapes:
#
#     %a artist
#     %r album
#     %f filename
#     %t title
#     %n track
#     %d file duration in XX:YY form
#     %D file duration, number of seconds
#
# No pipes/redirects can be used directly, but writing a shell script
# can do the job.
#
# Example:    OnSongChange = "/home/jack/.moc/myscript %a %r"
#
OnSongChange = "/home/pritesh/.dotfiles/moc/.moc/notify.sh %t"
